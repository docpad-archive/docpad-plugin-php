// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = function(BasePlugin) {
    var PhpPlugin;
    return PhpPlugin = (function(_super) {

      __extends(PhpPlugin, _super);

      function PhpPlugin() {
        return PhpPlugin.__super__.constructor.apply(this, arguments);
      }

      PhpPlugin.prototype.name = 'php';

      PhpPlugin.prototype.priority = 700;

      PhpPlugin.prototype.render = function(opts, next) {
        var content, data, errors, exec, file, inExtension, outExtension, php, result, source, spawn, templateData, _ref;
        inExtension = opts.inExtension, outExtension = opts.outExtension, templateData = opts.templateData, content = opts.content, file = opts.file;
        if (inExtension === 'php' || inExtension === 'phtml') {
          _ref = require('child_process'), spawn = _ref.spawn, exec = _ref.exec;
          data = JSON.stringify(file.getMeta().toJSON());
          source = "<?php\n$content = <<<EOF\n" + (templateData.content || '') + "\nEOF;\n\n$document = <<<EOF\n" + data + "\nEOF;\n$document = json_decode($document,true);\n?>\n\n" + content;
          result = '';
          errors = '';
          php = spawn('php');
          php.stdout.on('data', function(data) {
            return result += data.toString();
          });
          php.stderr.on('data', function(data) {
            return errors += data.toString();
          });
          php.on('exit', function() {
            if (errors) {
              return next(new Error(errors), content);
            }
            opts.content = result;
            return next();
          });
          php.stdin.write(source);
          return php.stdin.end();
        } else {
          return next();
        }
      };

      return PhpPlugin;

    })(BasePlugin);
  };

}).call(this);
